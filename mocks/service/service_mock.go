// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	service "weathersvc/app/service"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetWeather mocks base method.
func (m *MockService) GetWeather(ctx context.Context, lat, lon float64) (service.WeatherCond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", ctx, lat, lon)
	ret0, _ := ret[0].(service.WeatherCond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather.
func (mr *MockServiceMockRecorder) GetWeather(ctx, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockService)(nil).GetWeather), ctx, lat, lon)
}

// ValidateSvc mocks base method.
func (m *MockService) ValidateSvc(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSvc", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSvc indicates an expected call of ValidateSvc.
func (mr *MockServiceMockRecorder) ValidateSvc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSvc", reflect.TypeOf((*MockService)(nil).ValidateSvc), ctx)
}
